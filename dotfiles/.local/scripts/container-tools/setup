#!/bin/bash

# devcontainer-tools/setup - Interactive nvim devcontainer setup tool
# Simplifies setting up nvim in devcontainers with LSP configurations

set -euo pipefail

# Script metadata
SCRIPT_NAME="devcontainer-tools/setup"
SCRIPT_VERSION="1.0.0"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
WORKSPACE_DIR="$(pwd)"

# Global variables
DRY_RUN=false
SELECTED_CONFIG=""
CONTAINER_HOME=""
CONTAINER_USER=""
CONTAINER_ID=""

# Source shared functions
source "$SCRIPT_DIR/common"

# Help function
show_help() {
  cat <<HELP_EOF
$SCRIPT_NAME v$SCRIPT_VERSION

Interactive CLI tool to set up nvim in devcontainers with LSP configurations.

USAGE:
    $SCRIPT_NAME [OPTIONS]

OPTIONS:
    --dry, -d          Show what commands would be executed without running them
    --help, -h         Show this help message
    --version          Show version information

EXAMPLES:
    $SCRIPT_NAME                    # Interactive setup
    $SCRIPT_NAME --dry              # Preview commands without execution

FEATURES:
    - Automatically discovers devcontainer configurations
    - Interactive configuration selection
    - Consistent nvim config mounting
    - Dry run mode for safe testing
    - User confirmation before execution
    - Automatic container user detection

HELP_EOF
}

# Version function
show_version() {
  echo "$SCRIPT_NAME v$SCRIPT_VERSION"
}

# Parse command line arguments
parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case $1 in
      --dry | -d)
        DRY_RUN=true
        shift
        ;;
      --help | -h)
        show_help
        exit 0
        ;;
      --version)
        show_version
        exit 0
        ;;
      *)
        log_error "Unknown option: $1"
        echo "Use --help for usage information"
        exit 1
        ;;
    esac
  done
}

# Get container ID from devcontainer
get_container_id() {
  local config="$1"

  log_info "Detecting container ID..."

  # Method 1: Try to get container ID from cgroup
  local container_id=$(devcontainer exec --workspace-folder . --config "$config" --quiet bash -c "cat /proc/self/cgroup | grep -E 'docker|containerd' | head -1 | cut -d/ -f3" 2>/dev/null || echo "")

  # Method 2: Try to get from /proc/self/mountinfo
  if [[ -z "$container_id" ]]; then
    container_id=$(devcontainer exec --workspace-folder . --config "$config" --quiet bash -c "grep -o 'containers/[a-f0-9]*' /proc/self/mountinfo | head -1 | cut -d/ -f2" 2>/dev/null || echo "")
  fi

  # Method 3: Try to get from hostname (short ID)
  if [[ -z "$container_id" ]]; then
    container_id=$(devcontainer exec --workspace-folder . --config "$config" --quiet bash -c "hostname" 2>/dev/null || echo "")
  fi

  # Method 4: Try to get from docker ps (if docker is available on host)
  if [[ -z "$container_id" ]]; then
    # Get the workspace folder name to match against running containers
    local workspace_name=$(basename "$WORKSPACE_DIR")
    container_id=$(docker ps --filter "label=devcontainer.local_folder=$WORKSPACE_DIR" --format "{{.ID}}" 2>/dev/null | head -1 || echo "")
  fi

  # Method 5: Try to get from docker ps by image name
  if [[ -z "$container_id" ]]; then
    # Try to match by devcontainer image
    container_id=$(docker ps --format "{{.ID}} {{.Image}}" | grep -E "(devcontainer|vscode)" | head -1 | cut -d' ' -f1 2>/dev/null || echo "")
  fi

  # Method 6: Try to get the most recent container
  if [[ -z "$container_id" ]]; then
    container_id=$(docker ps --format "{{.ID}}" | head -1 2>/dev/null || echo "")
  fi

  if [[ -z "$container_id" ]]; then
    log_error "Could not determine container ID using any method"
    log_error "Please ensure the devcontainer is running and accessible"
    log_error "You can also manually specify the container ID by setting CONTAINER_ID environment variable"
    exit 1
  fi

  CONTAINER_ID="$container_id"
  log_success "Container ID detected: $CONTAINER_ID"
}

# Confirm execution with user
confirm_execution() {
  local config="$1"
  local container_home="$2"

  echo
  log_info "Execution Plan:"
  echo "  Configuration: $config"
  echo "  Container HOME: $container_home"
  echo "  Copy nvim config from host: $HOME/.config/nvim -> container:$container_home/.config/nvim"
  echo "  Copy dev directory from host: $HOME/dev -> container:$container_home/dev"
  echo

  if [[ "$DRY_RUN" == true ]]; then
    log_dry "DRY RUN MODE - No actual execution will occur"
    return 0
  fi

  while true; do
    read -p "Proceed with devcontainer setup? (y/N): " confirm
    case $confirm in
      [Yy] | [Yy][Ee][Ss])
        return 0
        ;;
      [Nn] | [Nn][Oo] | "")
        log_info "Setup cancelled by user"
        exit 0
        ;;
      *)
        log_error "Please answer yes (y) or no (n)"
        ;;
    esac
  done
}

# Execute devcontainer up command
execute_devcontainer_up() {
  local config="$1"
  local container_home="$2"

  local cmd="devcontainer up --workspace-folder . --config \"$config\""

  if [[ "$DRY_RUN" == true ]]; then
    log_dry "Execute: $cmd"
    return 0
  fi

  log_info "Starting devcontainer..."
  log_info "Command: $cmd"

  if eval "$cmd"; then
    log_success "Devcontainer started successfully"
  else
    log_error "Failed to start devcontainer"
    exit 1
  fi
}

# Copy files using docker cp
copy_files_to_container() {
  local config="$1"
  local container_home="$2"

  # Check if container ID is already set (e.g., from environment variable)
  if [[ -n "${CONTAINER_ID:-}" ]]; then
    log_info "Using provided container ID: $CONTAINER_ID"
  else
    # Get container ID
    get_container_id "$config"
  fi

  # Copy nvim config if it exists
  if [[ -d "$HOME/.config/nvim" ]]; then
    local cmd="docker cp $HOME/.config/nvim/. $CONTAINER_ID:$container_home/.config/nvim/"

    if [[ "$DRY_RUN" == true ]]; then
      log_dry "Execute: $cmd"
    else
      log_info "Copying nvim config to container..."
      log_info "Command: $cmd"

      if eval "$cmd"; then
        log_success "Successfully copied nvim config to container"
      else
        log_warning "Failed to copy nvim config to container"
      fi
    fi
  else
    log_warning "No nvim config found at $HOME/.config/nvim"
  fi

  # Copy dev directory if it exists
  if [[ -d "$HOME/dev" ]]; then
    local cmd="docker cp $HOME/dev/. $CONTAINER_ID:$container_home/dev/"

    if [[ "$DRY_RUN" == true ]]; then
      log_dry "Execute: $cmd"
    else
      log_info "Copying dev directory to container..."
      log_info "Command: $cmd"

      if eval "$cmd"; then
        log_success "Successfully copied dev directory to container"
      else
        log_warning "Failed to copy dev directory to container"
      fi
    fi
  else
    log_warning "No dev directory found at $HOME/dev"
  fi
}

# Execute nvim setup inside container
execute_nvim_setup() {
  local config="$1"
  local container_home="$2"

  # Install nvim if not present and run it
  local setup_cmd="
    # Install nvim if not present
    if ! command -v nvim >/dev/null 2>&1; then
      sudo apt update && sudo apt install -y neovim
    fi
    
    # Run nvim
    $container_home/dev/run nvim
    
    # Update permissions
    chmod 700 $container_home/.local/state/nvim
    echo 'export XDG_RUNTIME_DIR=$container_home/.local/state/nvim' >> ~/.bashrc
    export XDG_RUNTIME_DIR=$container_home/.local/state/nvim
  "

  local cmd="devcontainer exec --workspace-folder . --config \"$config\" bash -c \"$setup_cmd\""

  if [[ "$DRY_RUN" == true ]]; then
    log_dry "Execute: $cmd"
    return 0
  fi

  log_info "Setting up nvim in container..."
  log_info "Command: $cmd"

  if eval "$cmd"; then
    log_success "Nvim setup completed successfully"
  else
    log_warning "Nvim setup may have failed, but container is running"
    log_info "You can manually run: devcontainer exec --workspace-folder . --config \"$config\" bash -c \"nvim .\""
  fi
}

# Show attachment instructions
show_attachment_instructions() {
  local config="$1"

  echo
  log_success "Setup completed!"
  echo
  log_info "To attach to the running devcontainer:"
  echo "  devcontainer exec --workspace-folder . --config \"$config\" bash -c \"nvim .\""
  echo
  log_info "Or to get a shell in the container:"
  echo "  devcontainer exec --workspace-folder . --config \"$config\" bash"
  echo
}

# Main function
main() {
  echo "=== $SCRIPT_NAME v$SCRIPT_VERSION ==="
  echo

  # Parse arguments
  parse_arguments "$@"

  # Check prerequisites
  check_devcontainer_installed

  # Discover configurations
  local configs=()
  while IFS= read -r config; do
    [[ -n "$config" ]] && configs+=("$config")
  done < <(discover_configurations)

  # Display and select configuration
  display_configurations "${configs[@]}"
  select_configuration "${configs[@]}"

  # Get container home from selected configuration
  get_container_home_from_config "$SELECTED_CONFIG"

  # Confirm execution
  confirm_execution "$SELECTED_CONFIG" "$CONTAINER_HOME"

  # Execute setup
  execute_devcontainer_up "$SELECTED_CONFIG" "$CONTAINER_HOME"
  copy_files_to_container "$SELECTED_CONFIG" "$CONTAINER_HOME"
  execute_nvim_setup "$SELECTED_CONFIG" "$CONTAINER_HOME"

  # Show instructions
  show_attachment_instructions "$SELECTED_CONFIG"
}

# Run main function with all arguments
main "$@"
